//
//  NotificationEntity.swift
//
//  This code was generated by AlecrimCoreData code generator tool.
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//

import Foundation
import CoreData
import SwiftyJSON
import Timepiece

import AlecrimCoreData

public class NotificationEntity: NSManagedObject {

    @NSManaged public var content: String?
    @NSManaged public var creationDate: NSDate?
    @NSManaged public var file: String?
    @NSManaged public var id: Int32 // cannot mark as optional because Objective-C compatibility issues
    @NSManaged public var link: String?
    @NSManaged public var modifiedDate: NSDate?
    @NSManaged public var slug: String?
    @NSManaged public var status: String?
    @NSManaged public var title: String?
    @NSManaged public var type: String?

    @NSManaged public var author: AuthorEntity?

    @NSManaged public var comments: Set<CommentEntity>

}

// MARK: - AlecrimCoreData query attributes

extension NotificationEntity {

    public static let content = AlecrimCoreData.Attribute<String?>("content")
    public static let creationDate = AlecrimCoreData.Attribute<NSDate?>("creationDate")
    public static let file = AlecrimCoreData.Attribute<String?>("file")
    public static let id = AlecrimCoreData.Attribute<Int32?>("id")
    public static let link = AlecrimCoreData.Attribute<String?>("link")
    public static let modifiedDate = AlecrimCoreData.Attribute<NSDate?>("modifiedDate")
    public static let slug = AlecrimCoreData.Attribute<String?>("slug")
    public static let status = AlecrimCoreData.Attribute<String?>("status")
    public static let title = AlecrimCoreData.Attribute<String?>("title")
    public static let type = AlecrimCoreData.Attribute<String?>("type")

    public static let author = AuthorEntityAttribute<AuthorEntity?>("author")

    public static let comments = AlecrimCoreData.EntitySetAttribute<Set<CommentEntity>>("comments")

}

public class NotificationEntityAttribute<T>: AlecrimCoreData.SingleEntityAttribute<T> {

    public override init(_ name: String) { super.init(name) }

    public lazy var content: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).content") }()
    public lazy var creationDate: AlecrimCoreData.Attribute<NSDate?> = { AlecrimCoreData.Attribute<NSDate?>("\(self.___name).creationDate") }()
    public lazy var file: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).file") }()
    public lazy var id: AlecrimCoreData.Attribute<Int32?> = { AlecrimCoreData.Attribute<Int32?>("\(self.___name).id") }()
    public lazy var link: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).link") }()
    public lazy var modifiedDate: AlecrimCoreData.Attribute<NSDate?> = { AlecrimCoreData.Attribute<NSDate?>("\(self.___name).modifiedDate") }()
    public lazy var slug: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).slug") }()
    public lazy var status: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).status") }()
    public lazy var title: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).title") }()
    public lazy var type: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).type") }()

    public lazy var author: AuthorEntityAttribute<AuthorEntity?> = { AuthorEntityAttribute<AuthorEntity?>("\(self.___name).author") }()

    public lazy var comments: AlecrimCoreData.EntitySetAttribute<Set<CommentEntity>> = { AlecrimCoreData.EntitySetAttribute<Set<CommentEntity>>("\(self.___name).comments") }()

}

extension NotificationEntity {
    
    public static func fromJSON(json: JSON, inout _ hasChanges: Bool) -> NotificationEntity? {
        if json.type != .Null {
            var entity = ZamzamManager.sharedInstance.dataContext.notifications.firstOrCreated({ $0.id == json["ID"].int32 })
            
            // Create or updated modified posts
            if entity.modifiedDate == nil
                || entity.modifiedDate! < json["modified"].string?.dateFromFormat(ZamzamConstants.DateTime.JSON_FORMAT) {
                    entity.title = json["title"].string
                    entity.content = json["content"].string
                    entity.type = json["type"].string
                    entity.status = json["status"].string
                    entity.slug = json["slug"].string
                    
                    if let value = json["date"].string {
                        entity.creationDate = value.dateFromFormat(ZamzamConstants.DateTime.JSON_FORMAT)
                    }
                    
                    if let value = json["modified"].string {
                        entity.modifiedDate = value.dateFromFormat(ZamzamConstants.DateTime.JSON_FORMAT)
                    }
                    
                    let metaJson = json["post_meta"]
                    if metaJson.type != .Null {
                        entity.type = metaJson["type"].string
                        entity.file = metaJson["file"].string
                        entity.link = metaJson["link"].string
                    }
                    
                    if let value = AuthorEntity.fromJSON(json["author"], &hasChanges) {
                        entity.author = value
                    }
                    
                    hasChanges = true
            }
            
            return entity
        }
        
        return nil
    }
    
}
