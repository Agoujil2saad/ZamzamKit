//
//  AuthorEntity.swift
//
//  This code was generated by AlecrimCoreData code generator tool.
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//

import Foundation
import CoreData
import SwiftyJSON
import Timepiece

import AlecrimCoreData

public class AuthorEntity: NSManagedObject {

    @NSManaged public var avatar: String?
    @NSManaged public var bio: String?
    @NSManaged public var creationDate: NSDate?
    @NSManaged public var id: Int32 // cannot mark as optional because Objective-C compatibility issues
    @NSManaged public var modifiedDate: NSDate?
    @NSManaged public var name: String?
    @NSManaged public var registrationDate: NSDate?
    @NSManaged public var slug: String?
    @NSManaged public var url: String?
    @NSManaged public var username: String?

    @NSManaged public var comments: Set<CommentEntity>
    @NSManaged public var notifications: Set<NotificationEntity>
    @NSManaged public var posts: Set<BlogPostEntity>

}

// MARK: - AlecrimCoreData query attributes

extension AuthorEntity {

    public static let avatar = AlecrimCoreData.Attribute<String?>("avatar")
    public static let bio = AlecrimCoreData.Attribute<String?>("bio")
    public static let creationDate = AlecrimCoreData.Attribute<NSDate?>("creationDate")
    public static let id = AlecrimCoreData.Attribute<Int32?>("id")
    public static let modifiedDate = AlecrimCoreData.Attribute<NSDate?>("modifiedDate")
    public static let name = AlecrimCoreData.Attribute<String?>("name")
    public static let registrationDate = AlecrimCoreData.Attribute<NSDate?>("registrationDate")
    public static let slug = AlecrimCoreData.Attribute<String?>("slug")
    public static let url = AlecrimCoreData.Attribute<String?>("url")
    public static let username = AlecrimCoreData.Attribute<String?>("username")

    public static let comments = AlecrimCoreData.EntitySetAttribute<Set<CommentEntity>>("comments")
    public static let notifications = AlecrimCoreData.EntitySetAttribute<Set<NotificationEntity>>("notifications")
    public static let posts = AlecrimCoreData.EntitySetAttribute<Set<BlogPostEntity>>("posts")

}

public class AuthorEntityAttribute<T>: AlecrimCoreData.SingleEntityAttribute<T> {

    public override init(_ name: String) { super.init(name) }

    public lazy var avatar: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).avatar") }()
    public lazy var bio: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).bio") }()
    public lazy var creationDate: AlecrimCoreData.Attribute<NSDate?> = { AlecrimCoreData.Attribute<NSDate?>("\(self.___name).creationDate") }()
    public lazy var id: AlecrimCoreData.Attribute<Int32?> = { AlecrimCoreData.Attribute<Int32?>("\(self.___name).id") }()
    public lazy var modifiedDate: AlecrimCoreData.Attribute<NSDate?> = { AlecrimCoreData.Attribute<NSDate?>("\(self.___name).modifiedDate") }()
    public lazy var name: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).name") }()
    public lazy var registrationDate: AlecrimCoreData.Attribute<NSDate?> = { AlecrimCoreData.Attribute<NSDate?>("\(self.___name).registrationDate") }()
    public lazy var slug: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).slug") }()
    public lazy var url: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).url") }()
    public lazy var username: AlecrimCoreData.Attribute<String?> = { AlecrimCoreData.Attribute<String?>("\(self.___name).username") }()

    public lazy var comments: AlecrimCoreData.EntitySetAttribute<Set<CommentEntity>> = { AlecrimCoreData.EntitySetAttribute<Set<CommentEntity>>("\(self.___name).comments") }()
    public lazy var notifications: AlecrimCoreData.EntitySetAttribute<Set<NotificationEntity>> = { AlecrimCoreData.EntitySetAttribute<Set<NotificationEntity>>("\(self.___name).notifications") }()
    public lazy var posts: AlecrimCoreData.EntitySetAttribute<Set<BlogPostEntity>> = { AlecrimCoreData.EntitySetAttribute<Set<BlogPostEntity>>("\(self.___name).posts") }()

}

extension AuthorEntity {
    
    public static func fromJSON(json: JSON, inout _ hasChanges: Bool) -> AuthorEntity? {
        if json.type != .Null {
            var entity = ZamzamManager.sharedInstance.dataContext.authors.firstOrCreated { $0.id == json["ID"].int32 }
            
            // New or modified entity
            if entity.modifiedDate == nil
                || entity.modifiedDate! < json["modified"].string?.dateFromFormat(ZamzamConstants.DateTime.JSON_FORMAT) {
                    entity.username = json["username"].string
                    entity.name = json["name"].string
                    entity.avatar = json["avatar"].string
                    entity.bio = json["description"].string
                    entity.url = json["URL"].string
                    entity.slug = json["slug"].string
                    
                    if let value = json["registered"].string {
                        entity.creationDate = value.dateFromFormat(ZamzamConstants.DateTime.JSON_FORMAT)
                        entity.registrationDate = value.dateFromFormat(ZamzamConstants.DateTime.JSON_FORMAT)
                    }
                    
                    hasChanges = true
            }
            
            return entity
        }

        return nil
    }
    
}
